{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "parser": "babel-eslint",
  "plugins": [
    "babel",
    "react",
    "lodash",
    "import",
    "jsx-a11y",
    "promise"
  ],
  "extends": [
    "react-app",
    "eslint:all",
    "plugin:react/all",
    "plugin:lodash/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:jsx-a11y/recommended",
    "plugin:promise/recommended"
  ],
  "settings": {
    // The names of any functions used to wrap the propTypes object, such as `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
    "propWrapperFunctions": [
      "forbidExtraProps"
    ]
  },
  "rules": {
    "quotes": ["error", "single", {"avoidEscape": true}],
    "strict": ["error", "never"],
    "brace-style": ["error", "allman"],
    // implicit-arrow-linebreak conflicts with brace-style allman
    "implicit-arrow-linebreak": "off",
    "padded-blocks": ["error", "never"],

    // Specify whether double or single quotes should be used in JSX attributes
    // http://eslint.org/docs/rules/jsx-quotes
    "jsx-quotes": ["error", "prefer-single"],

    "quote-props": ["error", "consistent-as-needed", {"numbers": true}],
    "spaced-comment"             : ["error", "always", {"block": {"balanced": true}}],
    "eqeqeq"                     : ["error", "smart"],
    "one-var"                    : ["error", "never"],
    "comma-dangle"               : ["error", "always-multiline"],
    "object-property-newline"    : ["error", {"allowMultiplePropertiesPerLine": true}],
    "object-curly-newline"       : ["off", {"minProperties": 2}],
    "no-extra-parens"            : ["error", "all", { "ignoreJSX": "multi-line" }],
    "semi"                       : "error",
    "no-useless-constructor"     : "error",
    "operator-linebreak"         : ["error", "before"],
    "arrow-spacing"              : "error",
    "camelcase"                  : ["error", {
      "properties": "never"}],

    "generator-star-spacing"        : ["error", "neither"],
    "array-bracket-spacing"         : "error",
    "babel/object-curly-spacing"    : "error",
    "object-shorthand"              : "error",
    "no-await-in-loop"              : "error",
    "array-element-newline"         : ["error", "consistent"],
    "function-call-argument-newline": ["error", "consistent"],

    "max-params": "off",
    "max-lines-per-function": "warn",

    // Prevent React to be incorrectly marked as unused
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
    "react/jsx-uses-react": "error",

    // Prevent variables used in JSX to be incorrectly marked as unused
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-vars.md
    "react/jsx-uses-vars": "error",

    // Prevent missing React when using JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/react-in-jsx-scope.md
    "react/react-in-jsx-scope": "error",

    // Prevent unused propType definitions
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unused-prop-types.md
    "react/no-unused-prop-types": ["warn", {
      "customValidators": [],
      "skipShapeProps": true
    }],

    // Prevent multiple component definition per file
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
    "react/no-multi-comp": ["error", { "ignoreStateless": true }],

    // Validate closing bracket location in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md
    "react/jsx-closing-bracket-location": ["error", {"selfClosing": "line-aligned", "nonEmpty": "line-aligned"}],

    // only .jsx files may have JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md
    "react/jsx-filename-extension": ["error", { "extensions": [".jsx", ".js"] }],

    // Prevent missing props validation in a React component definition
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prop-types.md
    "react/prop-types": ["error", { "ignore": [], "customValidators": [], "skipUndeclared": false }],

    "react/forbid-component-props": "off",

    // Limit maximum of props on a single line in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-props-per-line.md
    "react/jsx-max-props-per-line": ["off", { "maximum": 1 }],

    // Prevent usage of dangerous JSX properties
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger.md
    "react/no-danger": "warn",

    // Prevent missing parentheses around multilines JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md
    "react/jsx-wrap-multilines": ["error", {
      "declaration": true,
      "assignment": true,
      "return": true
      // "arrow": true,
    }],

    // require a shouldComponentUpdate method, or PureRenderMixin
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-optimization.md
    "react/require-optimization": ["error", { "allowDecorators": [] }],

    // Prevent usage of setState
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-set-state.md
    "react/no-set-state": "off",

    // Prevent usage of .bind() in JSX props
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md
    "react/jsx-no-bind": ["error", {
      "ignoreRefs": true,
      "allowArrowFunctions": true,
      "allowBind": false
    }],

    // Enforce propTypes declarations alphabetical sorting
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-prop-types.md
    "react/sort-prop-types": ["off", {
      "ignoreCase": true,
      "callbacksLast": false,
      "requiredFirst": false
    }],


    // Enforce JSX indentation
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent.md
    "react/jsx-indent": ["error", "tab"],
    // "react/jsx-indent": ["error", 4],

    // Validate props indentation in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-indent-props.md
    "react/jsx-indent-props"     : [ "error", "tab"],
    // "indent": [ "error", 4, {"SwitchCase": 1}],

    // Forbid certain propTypes (any, array, object)
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md
    "react/forbid-prop-types"    : ["error", { "forbid": ["any", "array", "object"] }],

    // Enforce boolean attributes notation in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md
    "react/jsx-boolean-value"    : ["error",
      "never"],
    // Enforce or disallow spaces inside of curly braces in JSX attributes
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md
    "react/jsx-curly-spacing"    : ["error", "never", {
      "allowMultiline": true }],

    // Enforce event handler naming conventions in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-handler-names.md
    "react/jsx-handler-names"    : ["error", {
      "eventHandlerPrefix"    : "handle",
      "eventHandlerPropPrefix": "on"
    }],

    // Validate JSX has key prop when in array or iterator
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-key.md
    "react/jsx-key"              : "error",

    // Prevent duplicate props in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
    "react/jsx-no-duplicate-props": ["error", { "ignoreCase": true }],

    // Prevent usage of unwrapped JSX strings
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-literals.md
    "react/jsx-no-literals": "warn",

    // Disallow undeclared variables in JSX
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md
    "react/jsx-no-undef": "error",

    // Enforce PascalCase for user-defined JSX components
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md
    "react/jsx-pascal-case": ["error", {
      "allowAllCaps": true,
      "ignore": []
    }],

    // Prevent usage of deprecated methods
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-deprecated.md
    "react/no-deprecated": "error",

    // Prevent usage of setState in componentDidMount
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-mount-set-state.md
    "react/no-did-mount-set-state": "error",

    // Prevent usage of setState in componentDidUpdate
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-did-update-set-state.md
    "react/no-did-update-set-state": "error",

    // Prevent usage of setState in componentWillUpdate
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-will-update-set-state.md
    "react/no-will-update-set-state": "error",

    // Prevent direct mutation of this.state
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-direct-mutation-state.md
    "react/no-direct-mutation-state": "off",

    // Prevent usage of isMounted
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md
    "react/no-is-mounted": "error",

    // Prevent using string references
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md
    "react/no-string-refs": "error",

    // Prevent usage of unknown DOM property
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unknown-property.md
    "react/no-unknown-property": "error",

    // Require ES6 class declarations over React.createClass
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md
    "react/prefer-es6-class": ["error", "always"],

    // Require stateless functions when not using lifecycle methods, setState or ref
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md
    "react/prefer-stateless-function": ["error", { "ignorePureComponents": true }],

    // Require render() methods to return something
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md
    "react/require-render-return": "error",

    // Prevent extra closing tags for components without children
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md
    "react/self-closing-comp": "error",

    // Enforce component methods order
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md
    "react/sort-comp": [
      "error",
      {
        "order" : [
          "static-methods",
          "lifecycle",
          "everything-else",
          "render"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "state",
            "getInitialState",
            "getChildContext",
            "getDerivedStateFromProps",
            "componentWillMount",
            "UNSAFE_componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "UNSAFE_componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "UNSAFE_componentWillUpdate",
            "getSnapshotBeforeUpdate",
            "componentDidUpdate",
            "componentDidCatch",
            "componentWillUnmount"
          ]
        }
      }],

    // Require that the first prop in a JSX element be on a new line when the element is multiline
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-first-prop-new-line.md
    // "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
    "react/jsx-first-prop-new-line": "error",

    // Enforce spacing around jsx equals signs
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-equals-spacing.md
    "react/jsx-equals-spacing": ["error", "never"],

    // Disallow target="_blank" on links
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-target-blank.md
    "react/jsx-no-target-blank": "error",

    // prevent accidental JS comments from being injected into JSX as text
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-comment-textnodes.md
    "react/jsx-no-comment-textnodes": "error",

    // disallow using React.render/ReactDOM.render's return value
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-render-return-value.md
    "react/no-render-return-value": "error",

    // warn against using findDOMNode()
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-find-dom-node.md
    "react/no-find-dom-node": "error",

    // Prevent problem with children and props.dangerouslySetInnerHTML
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-danger-with-children.md
    "react/no-danger-with-children": "error",

    // Require style prop value be an object or var
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/style-prop-object.md
    "react/style-prop-object": "error",

    // Prevent invalid characters from appearing in markup
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-unescaped-entities.md
    "react/no-unescaped-entities": "error",

    // Prevent passing of children as props
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-children-prop.md
    "react/no-children-prop": "error",

    // Validate whitespace in and around the JSX opening and closing brackets
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md
    "react/jsx-tag-spacing": ["error", {
      "closingSlash": "never",
      "beforeSelfClosing": "always",
      "afterOpening": "never"
    }],

    // Enforce spaces before the closing bracket of self-closing JSX elements
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md
    // Deprecated in favor of jsx-tag-spacing
    "react/jsx-space-before-closing": ["off", "always"],

    // Prevent usage of Array index in keys
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md
    "react/no-array-index-key": "error",

    // Enforce a defaultProps definition for every prop that is not a required prop
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-default-props.md
    "react/require-default-props": "off",

    // Prevent void DOM elements from receiving children
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/void-dom-elements-no-children.md
    "react/void-dom-elements-no-children": "error",

    // Enforce all defaultProps have a corresponding non-required PropType
    // https://github.com/yannickcr/eslint-plugin-react/blob/9e13ae2c51e44872b45cc15bf1ac3a72105bdd0e/docs/rules/default-props-match-prop-types.md
    "react/default-props-match-prop-types": ["error", { "allowRequiredDefaults": false }],

    // Prevent usage of shouldComponentUpdate when extending React.PureComponent
    // https://github.com/yannickcr/eslint-plugin-react/blob/9e13ae2c51e44872b45cc15bf1ac3a72105bdd0e/docs/rules/no-redundant-should-component-update.md
    "react/no-redundant-should-component-update": "error",

    // Prevent unused state values
    // https://github.com/yannickcr/eslint-plugin-react/pull/1103/files
    "react/no-unused-state": "error",

    // Enforces consistent naming for boolean props
    // https://github.com/yannickcr/eslint-plugin-react/blob/73abadb697034b5ccb514d79fb4689836fe61f91/docs/rules/boolean-prop-naming.md
    "react/boolean-prop-naming": ["off", {
      "propTypeNames": ["bool", "mutuallyExclusiveTrueProps"],
      "rule": "^(is|has)[A-Z]([A-Za-z0-9]?)+"
    }],

    // Prevents common casing typos
    // https://github.com/yannickcr/eslint-plugin-react/blob/73abadb697034b5ccb514d79fb4689836fe61f91/docs/rules/no-typos.md
    // TODO
    "react/no-typos": "off",

    // This option validates a specific depth for JSX.
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-max-depth.md
    "react/jsx-max-depth": "off",

    // Enforce consistent usage of destructuring assignment of props, state, and context
    // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/destructuring-assignment.md
    "react/destructuring-assignment": "warn",

    "react/jsx-sort-props"       : "off",

    "react/jsx-one-expression-per-line": "warn",

    "react/button-has-type": ["error", {
      "button": true,
      "submit": false,
      "reset": false
    }],

    "lodash/prefer-lodash-method": "off",

    // https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md
    "lodash/path-style"           : "off",

    "lodash/prop-shorthand": "off",

    "jsx-a11y/anchor-is-valid": ["warn", { "aspects": ["invalidHref"] }],

    "indent"                     : [ "error", "tab",
      {"SwitchCase": 1}],
    "key-spacing"                : ["error", {"align": "colon"}],
    "no-multi-spaces"            : "off",
    "no-tabs"                    : "off",

    "no-warning-comments"        : "warn",
    "id-length"                  : "warn",

    "class-methods-use-this"     : ["error", {
      "exceptMethods": [
        "render",
        "getInitialState",
        "getDefaultProps",
        "getChildContext",
        "componentWillMount",
        "componentDidMount",
        "componentWillReceiveProps",
        "shouldComponentUpdate",
        "componentWillUpdate",
        "componentDidUpdate",
        "componentWillUnmount"
      ]
    }],
    "no-console"                 : "warn",
    "arrow-parens"               : ["error", "as-needed", {"requireForBlockBody": true}],
    "dot-location"               : ["error", "property"],
    "new-cap"                    : ["error", {"capIsNew": false}],
	"func-names": ["error", "as-needed"],
	"no-constant-condition" : ["error", { "checkLoops": false }],

    "sort-keys"                  : "off",
    "max-len"                    : "off",
    "newline-before-return"      : "off",
    "no-magic-numbers": "off",
    "newline-after-var": "off",
    "no-ternary": "off",
    "multiline-ternary": "off",
    "no-inline-comments": "off",
    "sort-imports": "off",
    "space-before-function-paren": "off",
    "no-invalid-this": "off",
    "no-return-assign": "off",
    "newline-per-chained-call": "off",
    "max-statements": "off",
    "max-lines": "off",
    "no-mixed-operators": "off",
    "wrap-regex": "off",
    "jsx-a11y/href-no-hash": "off",
    "no-undefined": "off",
    "require-jsdoc": "off",
    "babel/quotes": "off",
    "import/no-internal-modules": "off",
    "import/no-relative-parent-imports": "off",

    "no-process-env": "off",
    "babel/camelcase": "error",
    "babel/new-cap": "error",
    "babel/no-invalid-this": "error",
    "babel/no-unused-expressions": "error",
    "babel/semi": "error",
    "babel/valid-typeof": "error",
    "import/dynamic-import-chunkname": "error",
    "import/exports-last": "error",
    "import/extensions": "error",
    "import/group-exports": "error",
    "import/max-dependencies": "error",
    "import/newline-after-import": "error",
    "import/no-absolute-path": "error",
    "import/no-anonymous-default-export": "error",
    "import/no-commonjs": "error",
    "import/no-cycle": "error",
    "import/no-default-export": "off",
    "import/prefer-default-export": "error",
    "import/no-deprecated": "error",
    "import/no-dynamic-require": "error",
    "import/no-extraneous-dependencies": "error",
    "import/no-mutable-exports": "error",
    "import/no-named-default": "error",
    "import/no-named-export": "error",
    "import/no-namespace": "error",
    "import/no-nodejs-modules": "error",
    "import/no-restricted-paths": "error",
    "import/no-self-import": "error",
    "import/no-unassigned-import": "error",
    "import/no-unused-modules": "error",
    "import/no-useless-path-segments": "error",
    "import/order": "error",
    "import/unambiguous": "error",
    "promise/prefer-await-to-callbacks": "error",
    "promise/prefer-await-to-then": "error"
  }
}
